1
00:00:00,000 --> 00:00:01,650
hi everybody and welcome to the

2
00:00:01,650 --> 00:00:03,300
tensorflow cafe at the tensorflow

3
00:00:03,300 --> 00:00:05,640
developer summit alex pathos who was

4
00:00:05,640 --> 00:00:07,740
here from the eager team and he was at

5
00:00:07,740 --> 00:00:09,780
the summit talking about eager so alex

6
00:00:09,780 --> 00:00:10,500
welcome

7
00:00:10,500 --> 00:00:12,480
wow thank you yeah how would you talk I

8
00:00:12,480 --> 00:00:15,059
think eager execution is super

9
00:00:15,059 --> 00:00:16,949
interesting like this new way you're

10
00:00:16,949 --> 00:00:19,170
using pencil flow that's a lot more

11
00:00:19,170 --> 00:00:21,390
intuitive pythonic and object-oriented

12
00:00:21,390 --> 00:00:24,539
and I think friendly and I don't know

13
00:00:24,539 --> 00:00:26,189
people seemed excited to hear about it a

14
00:00:26,189 --> 00:00:27,960
lot of developers that I've chatted with

15
00:00:27,960 --> 00:00:29,369
like did getting to understand the

16
00:00:29,369 --> 00:00:31,500
graph-based mode was a little bit of a

17
00:00:31,500 --> 00:00:33,570
bump for them to get over so then having

18
00:00:33,570 --> 00:00:34,860
eager and they're like you say more

19
00:00:34,860 --> 00:00:36,510
pythonic way of doing it certainly makes

20
00:00:36,510 --> 00:00:39,180
it easier for them yeah it's a it's a

21
00:00:39,180 --> 00:00:41,100
hard mental model it can be I mean it

22
00:00:41,100 --> 00:00:42,329
doesn't have to be but it can be a

23
00:00:42,329 --> 00:00:44,640
little hard of a mental model to write

24
00:00:44,640 --> 00:00:46,920
code that builds a graph that then runs

25
00:00:46,920 --> 00:00:49,260
just short cutting this to just write

26
00:00:49,260 --> 00:00:51,480
code that runs it's a lot a much

27
00:00:51,480 --> 00:00:52,920
friendlier experience and once your code

28
00:00:52,920 --> 00:00:55,980
is working he usually just builds a

29
00:00:55,980 --> 00:00:58,500
graph automatically like you once your

30
00:00:58,500 --> 00:01:00,390
code is working a bigger execution you

31
00:01:00,390 --> 00:01:01,680
can flip a switch and it will build a

32
00:01:01,680 --> 00:01:04,170
graph without errors so it's a it's a

33
00:01:04,170 --> 00:01:06,240
much like move or way to approach the

34
00:01:06,240 --> 00:01:07,979
whole process does it does it make like

35
00:01:07,979 --> 00:01:09,570
the concept of like prototyping testing

36
00:01:09,570 --> 00:01:11,189
prototyping testing does it make that a

37
00:01:11,189 --> 00:01:12,630
little bit easier do you think yeah

38
00:01:12,630 --> 00:01:15,450
definitely because you can you also it's

39
00:01:15,450 --> 00:01:17,430
not as if it has to be a prototype if

40
00:01:17,430 --> 00:01:19,200
you're using eager execution you can't

41
00:01:19,200 --> 00:01:20,729
get really good performance like one of

42
00:01:20,729 --> 00:01:23,759
my slides talked about how in ResNet

43
00:01:23,759 --> 00:01:27,390
models and like l SCM models with the

44
00:01:27,390 --> 00:01:29,009
right kernels you have this good

45
00:01:29,009 --> 00:01:30,210
performance as you have with graph

46
00:01:30,210 --> 00:01:33,420
execution so it's not by this I don't

47
00:01:33,420 --> 00:01:35,040
mean we're creating a little prototyping

48
00:01:35,040 --> 00:01:36,000
playground no this is a serious

49
00:01:36,000 --> 00:01:37,820
framework you can use to do your real

50
00:01:37,820 --> 00:01:40,860
development but it's also much easier to

51
00:01:40,860 --> 00:01:43,409
play around it sounds good

52
00:01:43,409 --> 00:01:45,840
and I think for somebody coming into

53
00:01:45,840 --> 00:01:47,700
learning to build tensorflow stuff I

54
00:01:47,700 --> 00:01:49,649
find it's an easier way for them to get

55
00:01:49,649 --> 00:01:51,509
started because it's more familiar yeah

56
00:01:51,509 --> 00:01:52,680
I definitely like especially if you've

57
00:01:52,680 --> 00:01:54,450
done any kind of playing around with

58
00:01:54,450 --> 00:01:56,340
almost any machine learning library

59
00:01:56,340 --> 00:01:58,409
before you've probably interacted with R

60
00:01:58,409 --> 00:02:01,799
or with Python with numpy and those

61
00:02:01,799 --> 00:02:03,689
things have this very interactive like

62
00:02:03,689 --> 00:02:05,969
build as you go inspect as you go

63
00:02:05,969 --> 00:02:08,220
development style and that's you can

64
00:02:08,220 --> 00:02:09,810
replicate that one to one

65
00:02:09,810 --> 00:02:11,610
on the floor would be your execution

66
00:02:11,610 --> 00:02:14,069
right so it's very intuitive to go from

67
00:02:14,069 --> 00:02:16,020
where you are now to like taking the

68
00:02:16,020 --> 00:02:18,660
same methods and applying them to larger

69
00:02:18,660 --> 00:02:21,120
interesting convolution Oh or recurrent

70
00:02:21,120 --> 00:02:22,770
networks or recursive networks or all

71
00:02:22,770 --> 00:02:24,390
these like cool other models that people

72
00:02:24,390 --> 00:02:26,580
are super excited about these days egos

73
00:02:26,580 --> 00:02:28,019
just taking a big step right it's moved

74
00:02:28,019 --> 00:02:30,150
from country to the core intensive yes

75
00:02:30,150 --> 00:02:33,000
we just graduated eager execution into

76
00:02:33,000 --> 00:02:36,019
tensor folklore in TF 1.7 and this is a

77
00:02:36,019 --> 00:02:38,099
strong statement from us that we're

78
00:02:38,099 --> 00:02:40,110
happy with the eager execution API as it

79
00:02:40,110 --> 00:02:42,600
stands like we think enable you get

80
00:02:42,600 --> 00:02:45,390
execution gradient tape those symbols

81
00:02:45,390 --> 00:02:46,920
have moved to Cora they're here to stay

82
00:02:46,920 --> 00:02:48,569
and they're gonna be supported forever

83
00:02:48,569 --> 00:02:51,390
with all the like API stability and

84
00:02:51,390 --> 00:02:52,950
guarantees the chemist and so forth

85
00:02:52,950 --> 00:02:55,980
we see eager as now being a core part of

86
00:02:55,980 --> 00:02:58,080
the tensorflow experience and something

87
00:02:58,080 --> 00:03:00,299
that most of our users are gonna

88
00:03:00,299 --> 00:03:02,099
interactive at one point or another in a

89
00:03:02,099 --> 00:03:04,260
way that will hopefully make them much

90
00:03:04,260 --> 00:03:06,209
more productive and happier I actually

91
00:03:06,209 --> 00:03:07,799
like the way you said that's a sign of

92
00:03:07,799 --> 00:03:09,390
our confidence in ego that we've done

93
00:03:09,390 --> 00:03:10,799
that so that that's really true and I

94
00:03:10,799 --> 00:03:12,030
never thought about it that way so it's

95
00:03:12,030 --> 00:03:13,680
kind of cool now one of the things you

96
00:03:13,680 --> 00:03:15,150
said in your talk you were talking about

97
00:03:15,150 --> 00:03:16,859
like how if somebody wants to write

98
00:03:16,859 --> 00:03:18,720
eager compatible code and how they want

99
00:03:18,720 --> 00:03:20,010
to optimize it that kind of stuff you

100
00:03:20,010 --> 00:03:21,150
gave some guidance good

101
00:03:21,150 --> 00:03:22,470
could you talk through that a little bit

102
00:03:22,470 --> 00:03:25,019
for your code to work well and eager you

103
00:03:25,019 --> 00:03:26,489
want to coach be written in a Python

104
00:03:26,489 --> 00:03:28,410
like an object-oriented style right

105
00:03:28,410 --> 00:03:30,780
graph just flows a little more flexible

106
00:03:30,780 --> 00:03:32,700
and lets you write your code in a way

107
00:03:32,700 --> 00:03:34,260
that involves a lot of action at a

108
00:03:34,260 --> 00:03:36,690
distance which can be super powerful if

109
00:03:36,690 --> 00:03:38,040
you know what you're doing and if you're

110
00:03:38,040 --> 00:03:39,630
an expert with a tool but also can be a

111
00:03:39,630 --> 00:03:41,940
little hard to approach so if we're you

112
00:03:41,940 --> 00:03:43,410
to write code is gonna work well with

113
00:03:43,410 --> 00:03:45,810
eager execution turned on and also when

114
00:03:45,810 --> 00:03:47,730
you're building a graph it helps if you

115
00:03:47,730 --> 00:03:49,290
avoid some of that action of the

116
00:03:49,290 --> 00:03:50,700
distance and some other global state

117
00:03:50,700 --> 00:03:52,590
that discipline has and just write more

118
00:03:52,590 --> 00:03:54,780
straightforward object-oriented code so

119
00:03:54,780 --> 00:03:56,819
things like when you're using layers

120
00:03:56,819 --> 00:04:00,870
tentacle has these two parallel sets of

121
00:04:00,870 --> 00:04:03,209
layers API is one that's a little more

122
00:04:03,209 --> 00:04:05,850
functional and one that's a little more

123
00:04:05,850 --> 00:04:07,859
object oriented and the object-oriented

124
00:04:07,859 --> 00:04:09,630
layers please use those if you're

125
00:04:09,630 --> 00:04:11,760
building your model of a confucian but

126
00:04:11,760 --> 00:04:14,220
once you use those it just translates

127
00:04:14,220 --> 00:04:16,440
naturally to building ground

128
00:04:16,440 --> 00:04:17,940
same thing if you're like building a

129
00:04:17,940 --> 00:04:21,390
model just if you're using functional

130
00:04:21,390 --> 00:04:22,770
layers you might sometimes don't even

131
00:04:22,770 --> 00:04:27,000
have a model class in your code have one

132
00:04:27,000 --> 00:04:29,430
make it inherit from T after karasov

133
00:04:29,430 --> 00:04:32,250
model which is a well-tested model class

134
00:04:32,250 --> 00:04:34,170
has lots of utilities have to save load

135
00:04:34,170 --> 00:04:36,450
train your model right it will save you

136
00:04:36,450 --> 00:04:38,010
a lot of work it won't force you to do

137
00:04:38,010 --> 00:04:40,380
anything but if you use its tools it's

138
00:04:40,380 --> 00:04:42,360
gonna work perfectly well raviga

139
00:04:42,360 --> 00:04:44,130
execution and also perfectly well on

140
00:04:44,130 --> 00:04:46,560
building graphs so these are like big

141
00:04:46,560 --> 00:04:48,030
things about how you build your model

142
00:04:48,030 --> 00:04:50,580
directly but there's a lot more to

143
00:04:50,580 --> 00:04:52,950
making in training machine learning

144
00:04:52,950 --> 00:04:54,540
model than just your model building code

145
00:04:54,540 --> 00:04:59,820
and sadly the TF dot summary package is

146
00:04:59,820 --> 00:05:02,220
not compatible with the execution so

147
00:05:02,220 --> 00:05:04,530
we're making a new summary package which

148
00:05:04,530 --> 00:05:05,970
is now available in country but it will

149
00:05:05,970 --> 00:05:08,490
soon move into a tensor board and this

150
00:05:08,490 --> 00:05:11,040
new summary package is compatible both

151
00:05:11,040 --> 00:05:13,200
eager execution and graph building nice

152
00:05:13,200 --> 00:05:16,470
and similarly the metrics in TF dogmatix

153
00:05:16,470 --> 00:05:17,430
they are not compatible with the

154
00:05:17,430 --> 00:05:19,050
execution because they were written and

155
00:05:19,050 --> 00:05:21,090
is very powerful like action and a

156
00:05:21,090 --> 00:05:23,070
distance way that depends on graph

157
00:05:23,070 --> 00:05:25,290
pruning for correctness so we're

158
00:05:25,290 --> 00:05:27,510
introducing a new metrics package that

159
00:05:27,510 --> 00:05:30,270
is works well in both eager and graph

160
00:05:30,270 --> 00:05:32,970
right so as long as you like stick to

161
00:05:32,970 --> 00:05:35,580
the nice object-oriented user-friendly

162
00:05:35,580 --> 00:05:36,540
if you guys are gonna have high

163
00:05:36,540 --> 00:05:38,520
performance easy to read code that's

164
00:05:38,520 --> 00:05:41,250
gonna be developable and eager and then

165
00:05:41,250 --> 00:05:42,660
deploy a billing graph or even

166
00:05:42,660 --> 00:05:44,700
deployable and eager if you're all to

167
00:05:44,700 --> 00:05:47,700
deploy - - environment so apart from

168
00:05:47,700 --> 00:05:49,710
watching your talk what advice would you

169
00:05:49,710 --> 00:05:51,120
give for somebody wanting to get started

170
00:05:51,120 --> 00:05:53,730
in ego we have our test flow programmers

171
00:05:53,730 --> 00:05:54,990
guide on the website if you go and

172
00:05:54,990 --> 00:05:56,160
testify that are then click on

173
00:05:56,160 --> 00:05:58,290
programmers guide as of today it should

174
00:05:58,290 --> 00:06:00,090
have a chapter on eager execution and

175
00:06:00,090 --> 00:06:01,800
it's really nice then introduces you to

176
00:06:01,800 --> 00:06:03,840
test a flow too eager execution lets you

177
00:06:03,840 --> 00:06:05,880
like play around with it shows you all

178
00:06:05,880 --> 00:06:08,190
the key pieces all the tools you have at

179
00:06:08,190 --> 00:06:08,850
your disposal

180
00:06:08,850 --> 00:06:10,680
I strongly recommend anyone who is

181
00:06:10,680 --> 00:06:13,320
interested to just go and play around

182
00:06:13,320 --> 00:06:15,180
with that chapter the programmers guide

183
00:06:15,180 --> 00:06:18,390
it has a link to a notebook that gives

184
00:06:18,390 --> 00:06:21,360
you like a step-by-step tools like play

185
00:06:21,360 --> 00:06:23,010
around and girls so I played with that

186
00:06:23,010 --> 00:06:24,990
notebook it's really cool yeah right

187
00:06:24,990 --> 00:06:26,040
it's so intuitive

188
00:06:26,040 --> 00:06:27,120
going in France and you can change

189
00:06:27,120 --> 00:06:29,400
things and you can see how they work I I

190
00:06:29,400 --> 00:06:32,130
think eager plays really well with

191
00:06:32,130 --> 00:06:33,480
notebooks and that interactive

192
00:06:33,480 --> 00:06:35,040
development style and testing style

193
00:06:35,040 --> 00:06:38,250
right which you know if our platform for

194
00:06:38,250 --> 00:06:41,430
notebooks the Google collab also gives

195
00:06:41,430 --> 00:06:44,280
anyone access to a GPU kernel so you can

196
00:06:44,280 --> 00:06:45,990
even get the high performance GPU

197
00:06:45,990 --> 00:06:47,820
training for a few hours for free yeah

198
00:06:47,820 --> 00:06:49,440
or they hold a brand I call that yeah

199
00:06:49,440 --> 00:06:51,870
said super cool so thank you so much

200
00:06:51,870 --> 00:06:54,120
Alex that made a lot of fun I've been

201
00:06:54,120 --> 00:06:55,260
really eager to have this conversation

202
00:06:55,260 --> 00:06:57,720
so I had to get that joke in so and

203
00:06:57,720 --> 00:06:59,310
thanks everybody for watching this

204
00:06:59,310 --> 00:07:01,170
episode if you've got any questions for

205
00:07:01,170 --> 00:07:02,760
me or if you have any questions for Alex

206
00:07:02,760 --> 00:07:04,050
please leave them in the comments below

207
00:07:04,050 --> 00:07:05,460
and don't forget to hit that subscribe

208
00:07:05,460 --> 00:07:07,500
button thank you

209
00:07:07,500 --> 00:07:20,010
[Music]

210
00:07:20,010 --> 00:07:29,050
[Music]

