1
00:00:01,070 --> 00:00:01,640
[Music]

2
00:00:01,640 --> 00:00:03,620
[Applause]

3
00:00:03,620 --> 00:00:06,330
hi and welcome to coding tensorflow

4
00:00:06,330 --> 00:00:08,490
a show where we focus on coding machine

5
00:00:08,490 --> 00:00:11,010
learning and AI I'm Laurence Moroney a

6
00:00:11,010 --> 00:00:12,690
developer advocate for tensorflow

7
00:00:12,690 --> 00:00:14,639
and in this episode we're going to look

8
00:00:14,639 --> 00:00:16,800
at using JavaScript for machine learning

9
00:00:16,800 --> 00:00:18,810
in the browser this is achieved using

10
00:00:18,810 --> 00:00:22,740
tensorflow j/s a javascript library for

11
00:00:22,740 --> 00:00:24,810
training and deploying machine learn

12
00:00:24,810 --> 00:00:27,539
models in the browser and on no js'

13
00:00:27,539 --> 00:00:29,820
there's lots of great information about

14
00:00:29,820 --> 00:00:32,180
it on the jsr tensorflow dot org site

15
00:00:32,180 --> 00:00:34,980
including samples API Docs and

16
00:00:34,980 --> 00:00:37,890
frequently asked questions in this first

17
00:00:37,890 --> 00:00:40,649
episode I'll show you how easy it is to

18
00:00:40,649 --> 00:00:43,680
build and train a very simple model that

19
00:00:43,680 --> 00:00:46,980
executes entirely in the browser and in

20
00:00:46,980 --> 00:00:48,989
the next episodes we'll look at setting

21
00:00:48,989 --> 00:00:50,760
up a node environment and running more

22
00:00:50,760 --> 00:00:53,910
complex examples are you ready to go ok

23
00:00:53,910 --> 00:00:57,539
let's do this let's first create the

24
00:00:57,539 --> 00:01:00,180
simplest web page imaginable it's empty

25
00:01:00,180 --> 00:01:02,910
but for 1 div and we'll even leave that

26
00:01:02,910 --> 00:01:05,640
empty too the next thing of course is to

27
00:01:05,640 --> 00:01:07,950
add the tensorflow j/s libraries and

28
00:01:07,950 --> 00:01:10,290
these can be inserted using a script tag

29
00:01:10,290 --> 00:01:14,040
and I do that here always be sure to use

30
00:01:14,040 --> 00:01:15,930
the latest version which you can find at

31
00:01:15,930 --> 00:01:18,390
this URL be sure to put the script

32
00:01:18,390 --> 00:01:21,110
loader in your head tag as shown here

33
00:01:21,110 --> 00:01:24,270
great you now have your page set up for

34
00:01:24,270 --> 00:01:27,360
tensorflow so let's now show a simple

35
00:01:27,360 --> 00:01:29,900
but powerful example of how it can work

36
00:01:29,900 --> 00:01:32,850
the goal of machine learning is to train

37
00:01:32,850 --> 00:01:35,880
a model from input data this model can

38
00:01:35,880 --> 00:01:38,189
be then used to in fare or predict

39
00:01:38,189 --> 00:01:42,210
output data for future input values so

40
00:01:42,210 --> 00:01:44,909
for example take a look at this data now

41
00:01:44,909 --> 00:01:46,649
it's pretty obvious to the human eye

42
00:01:46,649 --> 00:01:48,600
that there's a linear relationship in

43
00:01:48,600 --> 00:01:49,290
this data

44
00:01:49,290 --> 00:01:51,030
these dots can be joined by a straight

45
00:01:51,030 --> 00:01:54,060
line thus even though I don't know what

46
00:01:54,060 --> 00:01:57,540
the Y value is when X is 5 I can infer

47
00:01:57,540 --> 00:02:00,210
that by looking at the line in machine

48
00:02:00,210 --> 00:02:02,700
learning we do this by training a model

49
00:02:02,700 --> 00:02:05,219
on the input data so let's take a look

50
00:02:05,219 --> 00:02:07,619
at the code for this first of all I'm

51
00:02:07,619 --> 00:02:09,569
going to create a new script block and

52
00:02:09,569 --> 00:02:11,790
within that I'll create an asynchronous

53
00:02:11,790 --> 00:02:13,470
function called learn

54
00:02:13,470 --> 00:02:15,900
linear it's asynchronous because the

55
00:02:15,900 --> 00:02:18,270
learning will take some time so it's

56
00:02:18,270 --> 00:02:19,830
good to get into the habit of waiting

57
00:02:19,830 --> 00:02:22,860
for the learning to finished now I'm

58
00:02:22,860 --> 00:02:25,740
going to add a model I'm using a TF dot

59
00:02:25,740 --> 00:02:27,780
sequential where the outputs of one

60
00:02:27,780 --> 00:02:30,600
layer are the inputs to the next it's a

61
00:02:30,600 --> 00:02:32,730
simple stack of layers with no branching

62
00:02:32,730 --> 00:02:35,490
or any kind of skipping I will then add

63
00:02:35,490 --> 00:02:38,100
a dense layer to this and dense means

64
00:02:38,100 --> 00:02:39,990
all of the nodes in each of the layers

65
00:02:39,990 --> 00:02:42,570
are connected to each other in this case

66
00:02:42,570 --> 00:02:44,580
it's a little redundant as I only have

67
00:02:44,580 --> 00:02:46,709
one layer and one node but it's the

68
00:02:46,709 --> 00:02:48,930
easiest way to define a simple neural

69
00:02:48,930 --> 00:02:51,959
network like this now that my model is

70
00:02:51,959 --> 00:02:54,959
defined it's time to compile it to do

71
00:02:54,959 --> 00:02:56,850
this I have to specify some parameters

72
00:02:56,850 --> 00:02:58,740
including the loss function and the

73
00:02:58,740 --> 00:03:01,320
optimizer I'm setting the loss function

74
00:03:01,320 --> 00:03:03,959
to be a mean squared error it's a pretty

75
00:03:03,959 --> 00:03:05,610
standard one particularly for linear

76
00:03:05,610 --> 00:03:08,250
equations and the optimizer is going to

77
00:03:08,250 --> 00:03:10,770
be said to SGD which stands for a

78
00:03:10,770 --> 00:03:13,680
stochastic gradient descent this simply

79
00:03:13,680 --> 00:03:15,720
defines a methodology for the learning

80
00:03:15,720 --> 00:03:17,310
there are a bunch of them supported

81
00:03:17,310 --> 00:03:20,730
including SGD and the popular atom you

82
00:03:20,730 --> 00:03:22,320
can learn more about these in the

83
00:03:22,320 --> 00:03:24,540
training optimizer section of the API

84
00:03:24,540 --> 00:03:26,880
and we'll put a link below for the next

85
00:03:26,880 --> 00:03:29,370
step I'll define my x and y values for

86
00:03:29,370 --> 00:03:31,320
the line remember that graph we showed

87
00:03:31,320 --> 00:03:33,239
earlier let's take a look at the points

88
00:03:33,239 --> 00:03:35,700
on that you can see that I've labeled

89
00:03:35,700 --> 00:03:37,560
them here with their x and y coordinates

90
00:03:37,560 --> 00:03:40,170
from a machine learning perspective we

91
00:03:40,170 --> 00:03:42,030
can consider the X values to be our

92
00:03:42,030 --> 00:03:44,250
inputs and our Y values to be our

93
00:03:44,250 --> 00:03:47,010
desired outputs thus in the future if we

94
00:03:47,010 --> 00:03:49,560
feed in a new x value would get a Y

95
00:03:49,560 --> 00:03:52,769
value back so to train a model to do

96
00:03:52,769 --> 00:03:55,170
this we can create two tensors for the

97
00:03:55,170 --> 00:03:57,870
training values one for the X's and one

98
00:03:57,870 --> 00:03:59,790
for the Y's let's take a look at this in

99
00:03:59,790 --> 00:04:03,180
code I'll create a tensor for the X's by

100
00:04:03,180 --> 00:04:06,630
using TF tensor 2d you'll see that the

101
00:04:06,630 --> 00:04:09,030
first element in this is my array of X

102
00:04:09,030 --> 00:04:13,170
values minus 1 0 1 etc the second

103
00:04:13,170 --> 00:04:15,750
parameter is the shape of this array 6

104
00:04:15,750 --> 00:04:18,989
rows and 1 column I'll then do the same

105
00:04:18,989 --> 00:04:21,900
for my y's giving my Y values and the

106
00:04:21,900 --> 00:04:24,560
same shape six rows on one column

107
00:04:24,560 --> 00:04:27,030
now all I have to do is

108
00:04:27,030 --> 00:04:28,980
Rane my model now this can take some

109
00:04:28,980 --> 00:04:30,930
time for complex models but because this

110
00:04:30,930 --> 00:04:32,490
is really simple it's going to be really

111
00:04:32,490 --> 00:04:35,690
quick either way because it takes an

112
00:04:35,690 --> 00:04:38,820
indeterminate time you will await its

113
00:04:38,820 --> 00:04:41,100
execution which is why you made this

114
00:04:41,100 --> 00:04:43,139
function and a synchronous one to begin

115
00:04:43,139 --> 00:04:47,070
with so let's take a look at the code to

116
00:04:47,070 --> 00:04:49,050
train a model for a fixed number of

117
00:04:49,050 --> 00:04:52,290
iterations known as epochs you call the

118
00:04:52,290 --> 00:04:55,080
fit method here you can see I'm telling

119
00:04:55,080 --> 00:04:58,260
it my input values the X's my output

120
00:04:58,260 --> 00:05:01,080
values the Y's and then asking it to

121
00:05:01,080 --> 00:05:05,130
train for 250 iterations once the model

122
00:05:05,130 --> 00:05:07,380
is trained I can try to do a prediction

123
00:05:07,380 --> 00:05:09,990
from it so if you're good at math you'll

124
00:05:09,990 --> 00:05:11,970
see that the relationship here between x

125
00:05:11,970 --> 00:05:16,080
and y is y equals 2x minus 1 thus the

126
00:05:16,080 --> 00:05:17,610
value for X is 5

127
00:05:17,610 --> 00:05:20,370
well then Y should be 9 you use the

128
00:05:20,370 --> 00:05:22,320
model to predict method to get a

129
00:05:22,320 --> 00:05:24,830
prediction so let's see that in action

130
00:05:24,830 --> 00:05:27,479
I'll refer to the div called output

131
00:05:27,479 --> 00:05:29,820
field that I created earlier and I'll

132
00:05:29,820 --> 00:05:31,770
load the results of the prediction into

133
00:05:31,770 --> 00:05:34,800
its inner text to do this I call model

134
00:05:34,800 --> 00:05:37,380
duck predict and I pass my input tensor

135
00:05:37,380 --> 00:05:39,540
which is a single value in a one by one

136
00:05:39,540 --> 00:05:42,210
array tensorflow will then give me back

137
00:05:42,210 --> 00:05:43,710
the value and you'll see that it

138
00:05:43,710 --> 00:05:46,950
predicted 38.5 which is pretty close to

139
00:05:46,950 --> 00:05:50,880
the correct value of 39 if i refresh the

140
00:05:50,880 --> 00:05:53,940
value changes to 38.3 because I've

141
00:05:53,940 --> 00:05:56,100
retrained the neural network I can

142
00:05:56,100 --> 00:05:58,470
impact the accuracy by training for more

143
00:05:58,470 --> 00:06:01,260
epochs giving the network more time to

144
00:06:01,260 --> 00:06:04,530
error correct so let's make it say 500

145
00:06:04,530 --> 00:06:07,710
epochs and now when i refresh we'll see

146
00:06:07,710 --> 00:06:11,160
my value is 38.9 and another refresh

147
00:06:11,160 --> 00:06:13,380
keeps it there so let's see what it

148
00:06:13,380 --> 00:06:16,500
would predict for x equals 10 it gives

149
00:06:16,500 --> 00:06:18,780
us 18 point 9 7 where of course the

150
00:06:18,780 --> 00:06:21,390
correct value is 19 a refresh and

151
00:06:21,390 --> 00:06:23,370
retrain the network and now I get 18

152
00:06:23,370 --> 00:06:26,190
point 9 8 we're pretty close and that's

153
00:06:26,190 --> 00:06:28,740
it you've just created a neural network

154
00:06:28,740 --> 00:06:31,229
using javascript in the browser and

155
00:06:31,229 --> 00:06:33,330
trained it to predict a linear

156
00:06:33,330 --> 00:06:36,060
relationship this was made possible by

157
00:06:36,060 --> 00:06:39,060
tensorflow Jas in the next episode of

158
00:06:39,060 --> 00:06:40,710
this series you'll learn a little

159
00:06:40,710 --> 00:06:42,780
about data science and this is the

160
00:06:42,780 --> 00:06:44,850
process of preparing data for machine

161
00:06:44,850 --> 00:06:47,190
learning and you'll do it by building a

162
00:06:47,190 --> 00:06:49,050
simple classifier for tensorflow

163
00:06:49,050 --> 00:06:52,230
which runs completely in the browser you

164
00:06:52,230 --> 00:06:54,300
can learn more about tensorflow das on

165
00:06:54,300 --> 00:06:56,580
tensorflow org and don't forget to hit

166
00:06:56,580 --> 00:06:58,110
that subscribe button for more great

167
00:06:58,110 --> 00:07:01,560
videos on this channel thank you

168
00:07:01,560 --> 00:07:02,170
[Music]

169
00:07:02,170 --> 00:07:03,310
[Applause]

170
00:07:03,310 --> 00:07:07,970
[Music]

