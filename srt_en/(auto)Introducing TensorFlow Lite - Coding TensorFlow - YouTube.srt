1
00:00:01,650 --> 00:00:03,200
[Applause]

2
00:00:03,200 --> 00:00:05,879
hi and welcome to coding tensorflow

3
00:00:05,879 --> 00:00:07,589
where you will learn all about coding

4
00:00:07,589 --> 00:00:09,480
machine learning and AI with tensorflow

5
00:00:09,480 --> 00:00:11,490
I'm Laurence Moroney a developer

6
00:00:11,490 --> 00:00:13,410
advocate for tensorflow and I'll be your

7
00:00:13,410 --> 00:00:14,870
guide to tensorflow light today

8
00:00:14,870 --> 00:00:17,130
tensorflow light is tensor flows

9
00:00:17,130 --> 00:00:18,990
lightweight solution for mobile and

10
00:00:18,990 --> 00:00:21,480
embedded devices it lets you run machine

11
00:00:21,480 --> 00:00:23,760
learn models on mobile devices with low

12
00:00:23,760 --> 00:00:25,800
latency quickly so you can take

13
00:00:25,800 --> 00:00:27,300
advantage of them to do classification

14
00:00:27,300 --> 00:00:29,880
regression or anything else that you

15
00:00:29,880 --> 00:00:31,769
might want without necessarily incurring

16
00:00:31,769 --> 00:00:34,110
a round trip to the server it's

17
00:00:34,110 --> 00:00:36,059
presently supported on Android and iOS

18
00:00:36,059 --> 00:00:39,570
via a C++ API as well as a Java wrapper

19
00:00:39,570 --> 00:00:42,270
for Android developers on Android

20
00:00:42,270 --> 00:00:44,370
devices that support it the interpreter

21
00:00:44,370 --> 00:00:46,530
will also use Android neural networks

22
00:00:46,530 --> 00:00:49,020
API for hardware acceleration otherwise

23
00:00:49,020 --> 00:00:50,789
it can just default to the CPU for

24
00:00:50,789 --> 00:00:54,539
execution before you start with

25
00:00:54,539 --> 00:00:56,399
tensorflow light you will need a trained

26
00:00:56,399 --> 00:00:58,890
model you'll train it from a set of data

27
00:00:58,890 --> 00:01:00,899
using a high powered machine and when

28
00:01:00,899 --> 00:01:02,670
you're done you'll have a model file and

29
00:01:02,670 --> 00:01:05,129
a set of associated check points this

30
00:01:05,129 --> 00:01:07,439
model can then be exported to be used on

31
00:01:07,439 --> 00:01:09,450
a mobile device but before we do that

32
00:01:09,450 --> 00:01:11,130
let's take a look at the model itself

33
00:01:11,130 --> 00:01:13,170
there are a number of formats that it

34
00:01:13,170 --> 00:01:16,020
could be in all of these formats are

35
00:01:16,020 --> 00:01:18,479
based on the concept of protocol buffers

36
00:01:18,479 --> 00:01:21,330
and they define data structures with a

37
00:01:21,330 --> 00:01:23,640
protocol buffer or protobuf for short

38
00:01:23,640 --> 00:01:26,610
you can use tools to generate code in C

39
00:01:26,610 --> 00:01:29,460
Python and other languages that can then

40
00:01:29,460 --> 00:01:31,710
be used to load save and access the data

41
00:01:31,710 --> 00:01:34,290
in a simple way you can learn more about

42
00:01:34,290 --> 00:01:37,799
protocol buffers at this link the first

43
00:01:37,799 --> 00:01:40,350
of these is a graph def file which will

44
00:01:40,350 --> 00:01:42,479
have the dot PB extension if it's binary

45
00:01:42,479 --> 00:01:45,710
or dot PB txt if it's in text format

46
00:01:45,710 --> 00:01:48,060
while the text former as you can see on

47
00:01:48,060 --> 00:01:49,680
this slide is designed to be human

48
00:01:49,680 --> 00:01:53,100
readable it's also very verbose and it's

49
00:01:53,100 --> 00:01:55,500
not a size or memory efficient as its

50
00:01:55,500 --> 00:01:59,250
binary counterpart either way it's the

51
00:01:59,250 --> 00:02:01,590
heart of your model data it contains a

52
00:02:01,590 --> 00:02:03,420
description of your graph in a way that

53
00:02:03,420 --> 00:02:05,729
can be read by another process for

54
00:02:05,729 --> 00:02:07,259
example this model defines the

55
00:02:07,259 --> 00:02:09,360
operations of multiplying matrices a and

56
00:02:09,360 --> 00:02:12,580
B together to get see you

57
00:02:12,580 --> 00:02:15,220
may also encounter a checkpoint file and

58
00:02:15,220 --> 00:02:17,770
this contains serialized variables from

59
00:02:17,770 --> 00:02:20,050
a tensor flow graph it doesn't contain

60
00:02:20,050 --> 00:02:22,270
the graph structure just the state of

61
00:02:22,270 --> 00:02:23,710
the variables at a particular iteration

62
00:02:23,710 --> 00:02:26,500
of the learning it's useful to tell you

63
00:02:26,500 --> 00:02:28,600
variable values at different points in

64
00:02:28,600 --> 00:02:31,630
the learning process there's also a

65
00:02:31,630 --> 00:02:34,180
frozen graphed F where the variables

66
00:02:34,180 --> 00:02:35,980
from the latest checkpoint file are

67
00:02:35,980 --> 00:02:38,230
combined with the graphed and turned

68
00:02:38,230 --> 00:02:41,110
into constants this is important in the

69
00:02:41,110 --> 00:02:42,820
process of using tensor flow light

70
00:02:42,820 --> 00:02:44,890
you'll see in a moment how you can

71
00:02:44,890 --> 00:02:46,720
combine a graph def in a checkpoint to

72
00:02:46,720 --> 00:02:49,090
make one of these the process is called

73
00:02:49,090 --> 00:02:51,640
freezing because every variable is

74
00:02:51,640 --> 00:02:54,070
converted into a constant with a value

75
00:02:54,070 --> 00:02:55,750
from the constant read from a particular

76
00:02:55,750 --> 00:02:59,080
checkpoint finally there's the tensor

77
00:02:59,080 --> 00:03:02,530
flow light model Li te which is built

78
00:03:02,530 --> 00:03:04,780
from the frozen graph using the tensor

79
00:03:04,780 --> 00:03:07,450
flow optimising converter tool or toko

80
00:03:07,450 --> 00:03:10,959
for short the previous section is great

81
00:03:10,959 --> 00:03:12,520
if you've done a lot of work to train

82
00:03:12,520 --> 00:03:14,500
models and you either don't want to

83
00:03:14,500 --> 00:03:16,930
rerun the code and retrain them or maybe

84
00:03:16,930 --> 00:03:18,430
you don't have access to the original

85
00:03:18,430 --> 00:03:20,769
code and data but if you do have access

86
00:03:20,769 --> 00:03:23,050
to the code you can also go straight to

87
00:03:23,050 --> 00:03:25,030
the tensor flow light creation process

88
00:03:25,030 --> 00:03:27,010
in your code as part of the training

89
00:03:27,010 --> 00:03:28,560
let's have a look what that looks like

90
00:03:28,560 --> 00:03:30,970
here's a sample piece of code that

91
00:03:30,970 --> 00:03:33,310
converts to tensor containing an image

92
00:03:33,310 --> 00:03:36,250
from the sessions graph death into a TF

93
00:03:36,250 --> 00:03:37,989
light object as you can see it's pretty

94
00:03:37,989 --> 00:03:39,540
straightforward it's a single line

95
00:03:39,540 --> 00:03:41,830
though I'll give one small word of

96
00:03:41,830 --> 00:03:43,959
warning because tensorflow light is

97
00:03:43,959 --> 00:03:46,480
presently in Developer Preview there are

98
00:03:46,480 --> 00:03:48,280
quite a few operations intensive flow

99
00:03:48,280 --> 00:03:50,110
that are not yet handled by tensor flow

100
00:03:50,110 --> 00:03:53,080
light so it may not be quite ready for

101
00:03:53,080 --> 00:03:55,030
your custom models but we're working on

102
00:03:55,030 --> 00:03:57,610
it all the time so for the rest of this

103
00:03:57,610 --> 00:03:59,410
video I'm going to talk about some of

104
00:03:59,410 --> 00:04:01,660
the more popular public models for

105
00:04:01,660 --> 00:04:03,100
common scenarios that are fully

106
00:04:03,100 --> 00:04:05,769
compatible with tensor flow light to get

107
00:04:05,769 --> 00:04:07,420
a compatibility guide check out this

108
00:04:07,420 --> 00:04:11,620
link two of the more popular models that

109
00:04:11,620 --> 00:04:13,330
we've tested with tensor flow light and

110
00:04:13,330 --> 00:04:16,150
you can use with the preview are the

111
00:04:16,150 --> 00:04:19,570
first is Inception v3 this was built to

112
00:04:19,570 --> 00:04:22,120
validate the popular image net dataset

113
00:04:22,120 --> 00:04:24,280
and this is used in universities as a

114
00:04:24,280 --> 00:04:25,630
benchmark for image for

115
00:04:25,630 --> 00:04:29,110
datian so for example using inception

116
00:04:29,110 --> 00:04:32,050
this image receive these classifications

117
00:04:32,050 --> 00:04:35,200
showing an 88% chance that this image is

118
00:04:35,200 --> 00:04:36,060
a panda bear

119
00:04:36,060 --> 00:04:38,650
interestingly enough the number two

120
00:04:38,650 --> 00:04:40,540
results is for something called an in

121
00:04:40,540 --> 00:04:42,370
dress which looks like this

122
00:04:42,370 --> 00:04:44,470
and you can see the confusion because

123
00:04:44,470 --> 00:04:46,150
it's also a cute black-and-white little

124
00:04:46,150 --> 00:04:49,900
critter in addition to Inception

125
00:04:49,900 --> 00:04:52,330
tensorflow lights also supports the

126
00:04:52,330 --> 00:04:55,150
mobile nets set of models these have

127
00:04:55,150 --> 00:04:57,640
been designed to be mobile first so they

128
00:04:57,640 --> 00:04:59,980
have lower power requirements but

129
00:04:59,980 --> 00:05:01,420
they're not quite as accurate as

130
00:05:01,420 --> 00:05:03,970
something like Inception let's take a

131
00:05:03,970 --> 00:05:05,860
look at an example of a mobile net

132
00:05:05,860 --> 00:05:08,830
module running on Android this app takes

133
00:05:08,830 --> 00:05:10,990
a look at the camera feed and uses a

134
00:05:10,990 --> 00:05:12,820
trained mobile net to classify the

135
00:05:12,820 --> 00:05:15,190
dominant images in the picture here for

136
00:05:15,190 --> 00:05:17,110
example you can see I was holding up a

137
00:05:17,110 --> 00:05:18,910
water bottle to the camera and it got it

138
00:05:18,910 --> 00:05:22,330
right you can download the code and the

139
00:05:22,330 --> 00:05:24,520
mobile net models for this as part of

140
00:05:24,520 --> 00:05:27,070
the tensor flow for poets code labs at

141
00:05:27,070 --> 00:05:30,520
these links in part 1 you'll learn all

142
00:05:30,520 --> 00:05:32,800
about mobile net image classification

143
00:05:32,800 --> 00:05:35,440
and in part 2 you'll see how to deploy

144
00:05:35,440 --> 00:05:37,330
that to a mobile device using tensor

145
00:05:37,330 --> 00:05:40,120
flow lights I'll also be making some

146
00:05:40,120 --> 00:05:42,130
more videos going into the details of

147
00:05:42,130 --> 00:05:43,960
how you can build an app just like this

148
00:05:43,960 --> 00:05:46,330
one providing image classification on

149
00:05:46,330 --> 00:05:49,210
both Android and iOS so make sure you

150
00:05:49,210 --> 00:05:51,100
subscribe to this channel right now and

151
00:05:51,100 --> 00:05:52,840
if you have any questions please leave

152
00:05:52,840 --> 00:05:54,640
them in the comments below thank you

153
00:05:54,640 --> 00:05:56,170
very much and it's time to start coding

154
00:05:56,170 --> 00:05:59,200
tensorflow don't forget to click the

155
00:05:59,200 --> 00:06:00,760
subscribe button for more great videos

156
00:06:00,760 --> 00:06:03,240
like these ones

