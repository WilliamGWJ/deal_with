1
00:00:00,000 --> 00:00:04,790
[Music]

2
00:00:04,790 --> 00:00:07,379
if you've ever wanted to do step-by-step

3
00:00:07,379 --> 00:00:09,690
debugging of tensorflow projects but you

4
00:00:09,690 --> 00:00:11,580
didn't know how check out this video

5
00:00:11,580 --> 00:00:13,440
we're in just a couple of minutes I'll

6
00:00:13,440 --> 00:00:14,969
get you set up to use it with the

7
00:00:14,969 --> 00:00:18,180
PyCharm IDE if you're like me and you

8
00:00:18,180 --> 00:00:20,070
like to write a few lines of code at a

9
00:00:20,070 --> 00:00:22,050
time and then step through them to make

10
00:00:22,050 --> 00:00:24,060
sure that they behave properly but

11
00:00:24,060 --> 00:00:25,410
you're stuck a little bit with doing

12
00:00:25,410 --> 00:00:27,269
that with Python and tensorflow then

13
00:00:27,269 --> 00:00:30,810
this video is for you here I have a very

14
00:00:30,810 --> 00:00:32,759
simple hello world type application

15
00:00:32,759 --> 00:00:34,950
where I'm going to train a model and

16
00:00:34,950 --> 00:00:37,770
then run inference on it so here I'm

17
00:00:37,770 --> 00:00:39,660
feeding the model with a set of X's and

18
00:00:39,660 --> 00:00:41,610
Y's and there's a relationship between x

19
00:00:41,610 --> 00:00:44,160
and y it's a linear relationship and if

20
00:00:44,160 --> 00:00:45,539
you think about it you'll see that y

21
00:00:45,539 --> 00:00:48,960
equals 2x minus 1 so for example if x

22
00:00:48,960 --> 00:00:51,980
equals 4 2x minus 1 is 7 when x equals 3

23
00:00:51,980 --> 00:00:56,789
2x minus 1 is 5 etc etc so with only

24
00:00:56,789 --> 00:00:58,739
just a few points of data I'm going to

25
00:00:58,739 --> 00:01:01,260
train a model and note that I'm not

26
00:01:01,260 --> 00:01:03,510
telling it the formula I'm just training

27
00:01:03,510 --> 00:01:06,780
it on data and then I'll try to infer

28
00:01:06,780 --> 00:01:08,490
from that what the Y value should be

29
00:01:08,490 --> 00:01:11,460
when x equals 10 now we know that that's

30
00:01:11,460 --> 00:01:14,970
19 but what will the model and fare so

31
00:01:14,970 --> 00:01:16,560
let's take a look at debugging it I'm

32
00:01:16,560 --> 00:01:18,840
going to set a breakpoint and just like

33
00:01:18,840 --> 00:01:20,939
I would with Android studio or Visual

34
00:01:20,939 --> 00:01:24,180
Studio I can run and debug the debugger

35
00:01:24,180 --> 00:01:26,640
will launch and now you can see I'm in

36
00:01:26,640 --> 00:01:30,030
step-by-step debugging so here I have my

37
00:01:30,030 --> 00:01:33,090
model and if I click step to step over

38
00:01:33,090 --> 00:01:35,520
it I've created it and I can even take a

39
00:01:35,520 --> 00:01:38,369
peek inside of it here I add my layer

40
00:01:38,369 --> 00:01:40,740
and it's just one with one node so it's

41
00:01:40,740 --> 00:01:42,509
not really a network but it's more like

42
00:01:42,509 --> 00:01:45,479
a single neuron and now I can step over

43
00:01:45,479 --> 00:01:47,280
the compilation of the model and

44
00:01:47,280 --> 00:01:49,290
specifying the loss and optimizer

45
00:01:49,290 --> 00:01:53,159
functions for my X's and Y's you can see

46
00:01:53,159 --> 00:01:55,619
that they're numpy arrays so when I step

47
00:01:55,619 --> 00:01:57,899
over them I can inspect those it

48
00:01:57,899 --> 00:02:01,170
directly in the debugger so now when I

49
00:02:01,170 --> 00:02:03,869
run model dot fit and I'm passing my X's

50
00:02:03,869 --> 00:02:06,390
and Y's in I can see that the correct

51
00:02:06,390 --> 00:02:08,700
data is being passed into the training

52
00:02:08,700 --> 00:02:10,590
of the network so if something goes

53
00:02:10,590 --> 00:02:12,739
wrong I know it's not because of the

54
00:02:12,739 --> 00:02:16,110
so now when I step over that we can see

55
00:02:16,110 --> 00:02:19,260
the training take place now I have a

56
00:02:19,260 --> 00:02:21,689
trained model so I can step to the next

57
00:02:21,689 --> 00:02:24,060
line and start looking at predicting

58
00:02:24,060 --> 00:02:26,430
values based on that model so let's

59
00:02:26,430 --> 00:02:29,790
predict values for 10 11 12 and 13 and

60
00:02:29,790 --> 00:02:32,370
when I run model predict on these values

61
00:02:32,370 --> 00:02:34,739
and print it out we can see the answers

62
00:02:34,739 --> 00:02:36,569
in the console the results are pretty

63
00:02:36,569 --> 00:02:39,120
close for 10 I would have expected 19

64
00:02:39,120 --> 00:02:42,000
and for 11 I would get 21 but you can

65
00:02:42,000 --> 00:02:43,500
see that the model is getting very very

66
00:02:43,500 --> 00:02:46,260
close to that so that's today's tip

67
00:02:46,260 --> 00:02:49,319
using the step by step debugger it was a

68
00:02:49,319 --> 00:02:51,989
very simple scenario but it really helps

69
00:02:51,989 --> 00:02:54,599
demystify some of the stuff that goes on

70
00:02:54,599 --> 00:02:56,609
in a tensorflow application it's

71
00:02:56,609 --> 00:02:59,010
amazingly useful particularly as you

72
00:02:59,010 --> 00:03:01,650
prepare your data for training to be

73
00:03:01,650 --> 00:03:04,230
able to inspect it so give it a try

74
00:03:04,230 --> 00:03:13,430
[Music]

